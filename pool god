import machine
import time
#import schedule                  can't figure out how to get it and all its imports onto rpi

thermometer = machine.ADC(4)
photoresistor = machine.ADC(26)
tempInput = machine.ADC(27)
suntimeInput = machine.ADC(28)
calibration = machine.Pin(2, machine.Pin.IN, machine.Pin.PULL_DOWN)
servo1 = machine.PWM(machine.Pin(0))
servo2 = machine.PWM(machine.Pin(1))
servo1.freq(50)
servo2.freq(50)

asleep = False
suntimeMinutes = 0
covered = False                   #assume device begins uncovered
brightnessThreshold = 32768       #what signal strength should mean sunlight? calibrate this
switchTime = 10                   #how long does it take to roll up/unroll? calibrate this

suntimeCap = 240                  #default values 4 hrs
tempThreshold = 30                #default value 30 C

"""
define asking for parameters (suntimeCap and tempThreshold).
depends on how we'll make the physical interface. for now I assume we use two potentiometers
"""
def calibrate():
    print("beginning calibrate()")
    tempThreshold = int((tempInput.read_u16() * 0.00001525878 * 20) + 20)    #convert 0-65536 to 20-40
    suntimeCap = int(suntimeInput.read_u16() * 0.00001525878 * 720)          #convert 0-65536 to 0-720
    print("tempThreshold is " + str(tempThreshold))
    print("suntimeCap is " + str(suntimeCap))

def open():
    print("beginning open()")
    servo1.duty_ns(1000)   
    servo2.duty_ns(1000)                                         
    time.sleep(switchTime)

def close():
    print("beginning close()")
    servo1.duty_ns(2000)   
    servo2.duty_ns(2000)    
    time.sleep(switchTime)

def check():
    print("beginning check()")
    global covered
    global suntimeMinutes
    global suntimeCap
    brightness = photoresistor.read_u16()
    tempRead = thermometer.read_u16() * 3.266 / (65535)
    temperature = 27.0 - (tempRead - 0.706)/0.001721
    print("brightness is " + str(brightness))
    print("temperature is " + str(temperature))
    if not covered:
        print("not covered")
        if brightness > brightnessThreshold:
            print("incrementing suntimeMinutes")
            suntimeMinutes += 5
        if temperature > tempThreshold:
            print("temperature above threshold, closing")
            close()
            covered = True
    elif covered:
        print("covered")
        if temperature <= tempThreshold:
            print("temperature below threshold, opening")
            open()
            covered = False
    if suntimeMinutes >= suntimeCap and not covered:
        print("suntime above cap, closing")
        close()

def goodmorning():
    print("good morning. resetting suntimeMinutes")
    suntimeMinutes = 0
    if (covered):
        open()
    calibrate()
    asleep = False
    
def bedtime():
    print("bedtime")
    close()
    asleep = True
    time.sleep(35990)                           #to 10 sec before 6AM

#set scheduler events
#schedule.every().day.at("6:00").do(calibrate())
#schedule.every(5).minutes.do(check())
#schedule.every().day.at("20:00").do(bedtime())

#main loopf
while True:
    currTime = time.localtime()
    print("current hour is " + str(currTime[3]))
    print("current minute is " + str(currTime[4]))
    if (currTime[3] == 6 and asleep):           #if hour is 6A
        goodmorning()
    if (currTime[3] == 20 and not asleep):      #if hour is 8P
        bedtime()
    if (currTime[4] % 5 == 0):                  #every 5 minutes
        check()
    if (calibration.value() == 1):                #allows for setting new arguments outside of scheduler using button
        calibrate()
    time.sleep(1)